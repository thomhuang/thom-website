{
    "content": [
        {
            "title": "Conway's Game of Life",
            "description": [
                "I implemented Conway’s Game of Life as a little personal project that was inspired by first learning of it in Prof. Amit Sahai’s CS 181 course",
                "I utilized the pygame package in order to display the simulation and handle the graphics with ease, as well implementing the class Board that acts as a sparse matrix to replicate an infinite board for us to apply our algorithm to. We specifically utilized Sprites within pygame to represent each cell in our grid, allowing us to modify its color value individually depending on whether it’s alive or not in the current generation.",
                "The keybinds for the game are: ",
                "• MOUSE: If you click on any cell with any mouse event, changes cell from alive to dead or dead to alive pre-evolution.",
                "• ENTER: Run a single evolution",
                "• BACKSPACE: Resets the simulation",
                "• Below displays a current version of our grid (where white is an alive cell and black is a dead cell):"
            ],
            "summary": "This is a python implementation of Conway's Game of Life,a no-player game, utilizing pygame and the implementation of sparse matrix.",
            "imagePaths": [
                "conway.png"
            ],
            "id": "conways-game-of-life",
            "github": "https://github.com/thomhuang/Conway-s-Game-of-Life"
        },
        {
            "title": "Maze Solver",
            "description": [
                "This is a python implementation of solving mazes, utilizing pygame and what I learned when building the application for Conway’s Game of Life. It implements the same idea of using sprites to represent each cell of our matrix/grid.",
                "In general a:",
                "• Green Cell: Start cell",
                "• Red Cell: Target cell",
                "• Grey Cell: Wall cell",
                "• White Cell: Visited cell",
                "Where the keybinds for the game are:",
                "• s: Places start node at mouse position",
                "• e: Places target node at mouse position",
                "• LEFT CLICK: While user holds left-click down, places walls continuously at mouse position until",
                "• RIGHT CLICK: While uesr holds right-click down, removes walls continuously at mouse position until released",
                "• BACKSPACE: resets board to a empty board",
                "• d: Performs depth first search",
                "• b: Performs breadth first search",
                "Below displays an example populated grid and depth-first search performed on the same grid:"
            ],
            "summary": "This is a python implementation of solving mazes, utilizing pygame and what I learned when building the application for Conway's Game of Life.",
            "imagePaths": [
                "maze.png",
                "solved_maze.png"
            ],
            "id": "maze-solver",
            "github": "https://github.com/thomhuang/Maze-Solver"
        }
    ]
}